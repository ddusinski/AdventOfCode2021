day3 - BinaryDiagnostic
(number >> bitPos) & 1; -- checking teh number if the bit on bitPos = 1
integerList.removeIf(s -> checkBitOnPos(s, currentPosition) != currentBit); -- removing element from the list whn condition is filled

day5
int[][] array = new int[n][m]   - n - row, m - column
diagram.length      - number of rows
diagram[x].length   - number of columns in x row

day6
Map<Integer, Long> sumMap = new LinkedHashMap<>();
sumMap.containsKey(key)
sumMap.get(key);
sumMap.put(key, val);

day 7 -past function as a parameter
private interface CalcReqFuel {int calcFuel(int startLevel, int reqLevel);}
    CalcReqFuel part2= (a, b) -> {
        int n = Math.abs(a - b);
        return (n + 1) * n / 2;};
public int calcFuelConsumption(CalcReqFuel calcFunction) {sumOfFuel += calcFunction.calcFuel(level,i);}
