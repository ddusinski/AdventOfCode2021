day3 - BinaryDiagnostic
(number >> bitPos) & 1; -- checking the number if the bit on bitPos = 1
integerList.removeIf(s -> checkBitOnPos(s, currentPosition) != currentBit); -- removing element from the list whn condition is filled

day5
int[][] array = new int[n][m]   - n - row, m - column
diagram.length      - number of rows
diagram[x].length   - number of columns in x row

day6
Map<Integer, Long> sumMap = new LinkedHashMap<>();
sumMap.containsKey(key)
sumMap.get(key);
sumMap.put(key, val);

day 7 -past function as a parameter
private interface CalcReqFuel {int calcFuel(int startLevel, int reqLevel);}
    CalcReqFuel part2= (a, b) -> {
        int n = Math.abs(a - b);
        return (n + 1) * n / 2;};
public int calcFuelConsumption(CalcReqFuel calcFunction) {sumOfFuel += calcFunction.calcFuel(level,i);}

day 8
this.signalPattern.addAll(Arrays.asList(sPattern)); -- adds array into a list
String sPattern = input.split(" \\| ")[0]; -- pipeline is a special char which must be escaped
Set<Character> characterSet = s.chars().mapToObj(e -> (char) e).collect(Collectors.toSet());  -- changing String into Set<Character>
testedDigit.removeAll(this.digitSignalSetMap.get(comparingNumber));     -- removing one set from another one
for (Map.Entry<Integer, Set<Character>> mapEntry : this.digitSignalSetMap.entrySet()) {     -- looping thorough MAP using Map.Entry
                if (digit.equals(mapEntry.getValue())) {                        -- comparing two sets
                    result = mapEntry.getKey();}}                   -- getting key of the map

day9
basinSumList.sort(Collections.reverseOrder()); -- sorting list, reversed order
new Point(i, j) -- class from awt library to store (x,y)

day10
Stack<Chunk> chunkStack = new Stack<>();
chunkStack.push(c); -- adds element
chunkStack.peek(); -- check top element but not remove
chunkStack.pop(); -- take and remove top element

day 14
linked list - no memory limits

day15
Graph - Distra - to analise

day16
String "1234".substring(0,3) = "012" - last argument 3 omitted

day17
targetMinX = Integer.parseInt(xPart.split("\\.\\.")[0]); -- escaping dot
pointList.sort(Comparator.comparing(Point::getX)); -- sorting using object's methods